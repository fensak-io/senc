// Copyright (c) Fensak, LLC.
// SPDX-License-Identifier: MPL-2.0

import {
  DockerExecutor,
  MacosExecutor,
  MachineExecutor,
} from "@fensak-io/senc-schemastore-ciconfig";

export const rustDockerImg = "cimg/rust:1.73";
export const rustWithNodeDockerImg = "cimg/rust:1.73-node";
export const dockerCfgRustImg = [{ image: rustDockerImg }];
export const dockerCfgRustWithNodeImg = [{ image: rustWithNodeDockerImg }];
export const outPrefix = `# Copyright (c) Fensak, LLC.
# SPDX-License-Identifier: MPL-2.0
#
# -----             IMPORTANT             ------
# ----- DO NOT MODIFY THIS FILE BY HAND!! ------
# This file is autogenerated by senc, using the source in \`_ci\`.

`;

// Reusable steps
export const addSSHKeyStep = {
  add_ssh_keys: {
    fingerprints: ["8f:1a:b4:37:9c:ca:cf:49:04:e7:ce:0d:b5:ee:2a:0d"],
  },
};
export const addSaveCacheStep = {
  test: {
    save_cache: {
      key: 'senc-test-cargo-{{ arch }}-{{ checksum "Cargo.lock" }}',
      paths: ["./target"],
    },
  },
  build: {
    save_cache: {
      key: 'senc-build-cargo-{{ arch }}-{{ checksum "Cargo.lock" }}',
      paths: ["./target"],
    },
  },
};
export const addRestoreCacheStep = {
  test: {
    restore_cache: {
      keys: [
        'senc-test-cargo-{{ arch }}-{{ checksum "Cargo.lock" }}',
        "senc-test-cargo-{{ arch }}-",
      ],
    },
  },
  build: {
    restore_cache: {
      keys: [
        'senc-build-cargo-{{ arch }}-{{ checksum "Cargo.lock" }}',
        "senc-build-cargo-{{ arch }}-",
      ],
    },
  },
};

type Executor = DockerExecutor | MacosExecutor | MachineExecutor;

export const executors: Record<string, Executor> = {
  linux: {
    docker: dockerCfgRustImg,
  },
  linuxarm: {
    docker: dockerCfgRustImg,
    resource_class: "arm.large",
  },
  macos: {
    macos: {
      xcode: "15.0.0",
    },
    resource_class: "macos.m1.medium.gen1",
    environment: {
      HOMEBREW_NO_AUTO_UPDATE: 1,
    },
  },
  windows: {
    machine: {
      image: "windows-server-2022-gui:current",
    },
    // NOTE: this is a bug in the type
    // See https://github.com/SchemaStore/schemastore/pull/3426
    resource_class: "windows.medium",
    shell: "powershell.exe -ExecutionPolicy Bypass",
    environment: {
      PYTHON: "C:\\Python311\\python",
    },
  },
};

export function getBuildUnixJob(exec: Executor, artifactName: string): any {
  const baseSteps: any = [addSSHKeyStep, "checkout", addRestoreCacheStep.build];
  if (exec.macos) {
    baseSteps.push({
      run: {
        name: "install rust",
        command: `
brew install rustup
rustup-init -y
echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$BASH_ENV"
`,
      },
    });
  }

  return {
    ...exec,
    steps: [
      ...baseSteps,
      {
        run: {
          name: "build senc",
          command: "cargo build --release",
        },
      },
      addSaveCacheStep.build,
      {
        run: {
          name: "package build artifact",
          command: `
mkdir -p ./.build/prepartifact
mkdir -p ./.build/artifact
cp target/release/senc ./.build/prepartifact
cp LICENSE ./.build/prepartifact

cd ./.build/prepartifact
tar -zcf ../artifact/${artifactName} *
`,
        },
      },
      {
        when: {
          condition: {
            matches: {
              pattern: "^release$",
              value: "<< pipeline.git.branch >>",
            },
          },
          steps: [
            {
              persist_to_workspace: {
                root: ".build/artifact",
                paths: [artifactName],
              },
            },
          ],
        },
      },
    ],
  };
}

export function getBuildWindowsJob(): any {
  const exec = executors.windows;
  const artifactName = "senc-windows-amd64-msvc.tar.gz";
  return {
    ...exec,
    steps: [
      addSSHKeyStep,
      "checkout",
      {
        run: {
          name: "setup build env",
          // Switch from gnu targeted rust to msvc targeted rust
          command: `
choco uninstall -y rust
choco install -y rust-ms
`,
        },
      },
      addRestoreCacheStep.build,
      {
        run: {
          name: "build senc",
          command: "cargo build --release",
        },
      },
      addSaveCacheStep.build,
      {
        run: {
          name: "package build artifact",
          command: `
New-Item -Name ".build" -Type Directory
New-Item -Name ".build\\prepartifact" -Type Directory
New-Item -Name ".build\\artifact" -Type Directory
Copy-Item -Path "target\\release\\senc.exe" -Destination ".build\\prepartifact"
Copy-Item -Path "LICENSE" -Destination ".build\\prepartifact"
Set-Location -Path ".build\\prepartifact"
tar -zcf "..\\artifact\\${artifactName}" *
`,
        },
      },
      {
        when: {
          condition: {
            matches: {
              pattern: "^release$",
              value: "<< pipeline.git.branch >>",
            },
          },
          steps: [
            {
              persist_to_workspace: {
                root: ".build/artifact",
                paths: [artifactName],
              },
            },
          ],
        },
      },
    ],
  };
}
