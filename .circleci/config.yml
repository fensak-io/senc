version: 2.1

workflows:
  lint-test-release:
    jobs:
      - lint-test
      - build-unix:
          name: build-linux-amd64
          os: linux
          artifactname: senc-linux-amd64.tar.gz
          filters:
            branches:
              only:
                - main
                - release
      - build-unix:
          name: build-linux-arm64
          os: linuxarm
          artifactname: senc-linux-arm64.tar.gz
          filters:
            branches:
              only:
                - main
                - release
      - build-windows-amd64:
          filters:
            branches:
              only:
                - main
                - release

      # NOTE:
      # The darwin-arm64 build is temporarily disabled since we don't have access to the M1 environment.
      # This environment will be accessible starting May 2024.
      # - build-unix:
      #     name: build-darwin-arm64
      #     os: macos
      #     artifactname: senc-darwin-arm64.tar.gz
      #     filters:
      #       branches:
      #         only:
      #           - main

      - release:
          context: 'Fensak CI/CD'
          requires:
            - build-linux-amd64
            - build-linux-arm64
            - build-windows-amd64
            # - build-darwin-arm64
          filters:
            branches:
              only:
                - release

executors:
  linux:
    docker:
      - image: cimg/rust:1.73
  linuxarm:
    docker:
      - image: cimg/rust:1.73
    resource_class: arm.large
  macos:
    # https://circleci.com/docs/using-macos/
    macos:
      xcode: 15.0.0
    resource_class: macos.m1.medium.gen1

jobs:
  lint-test:
    docker:
      - image: cimg/rust:1.73-node
    # We use arm instances for linting and testing because of
    # https://github.com/denoland/deno_core/issues/217
    resource_class: arm.large
    steps:
      - add_ssh_keys:
          fingerprints:
            - "8f:1a:b4:37:9c:ca:cf:49:04:e7:ce:0d:b5:ee:2a:0d"
      - checkout
      - run:
          name: cargo fmt check
          command: cargo fmt --check
      - run:
          name: cargo build check
          command: cargo check
      - run:
          name: install pnpm
          command: |
            sudo corepack enable
            sudo corepack prepare pnpm@latest-8 --activate
      - run:
          name: install test script dependencies
          command: pnpm install
          working_directory: ./tests/fixtures
      - run:
          name: cargo test
          command: cargo test

  build-windows-amd64:
    machine:
      image: windows-server-2022-gui:current
    resource_class: windows.large
    shell: powershell.exe -ExecutionPolicy Bypass
    environment:
      PYTHON: 'C:\Python311\python'
    steps:
      - add_ssh_keys:
          fingerprints:
            - "8f:1a:b4:37:9c:ca:cf:49:04:e7:ce:0d:b5:ee:2a:0d"
      - checkout
      - run:
          name: setup build env
          command: |
            # Switch from gnu targeted rust to msvc targeted rust
            choco uninstall -y rust
            choco install -y rust-ms
      - run:
          name: build senc
          command: |
            cargo build --release
      - run:
          name: package build artifact
          command: |
            New-Item -Name ".build" -Type Directory
            New-Item -Name ".build\prepartifact" -Type Directory
            New-Item -Name ".build\artifact" -Type Directory
            Copy-Item -Path "target\release\senc" -Destination ".build\prepartifact"
            Copy-Item -Path "LICENSE" -Destination ".build\prepartifact"
            Set-Location -Path ".build\prepartifact"
            tar -zcf "..\artifact\senc-windows-amd64-msvc.tar.gz" *

      - when:
          condition:
            matches:
              pattern: "^release$"
              value: << pipeline.git.branch >>
          steps:
            - persist_to_workspace:
                root: .build/artifact
                paths:
                  - senc-windows-amd64-msvc.tar.gz

  build-unix:
    parameters:
      os:
        type: executor
      artifactname:
        type: string
    executor: << parameters.os >>
    steps:
      - add_ssh_keys:
          fingerprints:
            - "8f:1a:b4:37:9c:ca:cf:49:04:e7:ce:0d:b5:ee:2a:0d"
      - checkout
      - run:
          name: build senc
          command: |
            cargo build --release
      - run:
          name: package build artifact
          command: |
            mkdir -p ./.build/prepartifact
            mkdir -p ./.build/artifact
            cp target/release/senc ./.build/prepartifact
            cp LICENSE ./.build/prepartifact

            cd ./.build/prepartifact
            tar -zcf ../artifact/<< parameters.artifactname >> *
      - when:
          condition:
            matches:
              pattern: "^release$"
              value: << pipeline.git.branch >>
          steps:
            - persist_to_workspace:
                root: .build/artifact
                paths:
                  - << parameters.artifactname >>

  release:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: /tmp/artifact
      - run:
          command: |
            ls -lah /tmp/artifact
      - add_ssh_keys:
          fingerprints:
            - "8f:1a:b4:37:9c:ca:cf:49:04:e7:ce:0d:b5:ee:2a:0d"
      - checkout
      - run:
          name: download github-app-token CLI
          command: |
            curl -sLO https://github.com/fensak-io/github-app-token/releases/download/v0.0.1/github-app-token_linux_amd64.tar.gz
            tar -xvf github-app-token_linux_amd64.tar.gz
          working_directory: /tmp
      - run:
          name: semantic-release
          command: |
            export GITHUB_APP_PRIVATE_KEY="$(echo -n "$GITHUB_APP_PRIVATE_KEY_B64" | base64 -d)"
            export GITHUB_TOKEN="$(/tmp/github-app-token --repo fensak-io/senc)"

            npm install semantic-release-replace-plugin @semantic-release/git
            npx -y semantic-release@^22.0.5
